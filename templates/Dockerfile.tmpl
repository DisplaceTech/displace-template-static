# Multi-stage Docker build for static sites
# Build stage: Use uv for Python dependencies and site generation
FROM ghcr.io/astral-sh/uv:debian AS build

# Set work directory
WORKDIR /app

# Copy Python project files
COPY pyproject.toml uv.lock* README.md ./
COPY src/ ./src/
COPY content/ ./content/

# Install Python with uv
RUN uv python install {{ .PythonVersion | default "3.13" }}

# Install dependencies (skip if no dependencies defined)
RUN if [ ! -f uv.lock ]; then uv lock; fi
RUN if grep -q "dependencies = \[" pyproject.toml && ! grep -q "dependencies = \[\s*#" pyproject.toml; then uv sync --no-dev; fi
RUN uv sync --no-dev

# Run build process (either custom script or simple copy)
RUN if [ -f src/build.py ]; then \
        uv run src/build.py; \
    else \
        mkdir -p dist && cp -r content/* dist/; \
    fi

# Production stage: Serve with Caddy
FROM caddy:2.8-alpine

# Copy built site from build stage
COPY --from=build /app/dist /app/dist

# Create non-root user for security
RUN addgroup -g 1001 -S caddy && \
    adduser -S -D -H -u 1001 -h /app -s /sbin/nologin -G caddy caddy

# Set ownership
RUN chown -R caddy:caddy /app

# Switch to non-root user
USER caddy

# Expose port
EXPOSE 80

# Health check
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
    CMD caddy validate --config /etc/caddy/Caddyfile || exit 1

# Use Caddy as entrypoint with config from ConfigMap
CMD ["caddy", "run", "--config", "/etc/caddy/Caddyfile", "--adapter", "caddyfile"]
